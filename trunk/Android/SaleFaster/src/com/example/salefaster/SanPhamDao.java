package com.example.salefaster;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.salefaster.SanPham;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SAN_PHAM.
*/
public class SanPhamDao extends AbstractDao<SanPham, Long> {

    public static final String TABLENAME = "SAN_PHAM";

    /**
     * Properties of entity SanPham.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TenSP = new Property(1, String.class, "TenSP", false, "TEN_SP");
        public final static Property GiaMua = new Property(2, Float.class, "GiaMua", false, "GIA_MUA");
        public final static Property GiaBan = new Property(3, Float.class, "GiaBan", false, "GIA_BAN");
        public final static Property Barcode = new Property(4, String.class, "Barcode", false, "BARCODE");
        public final static Property SoLuong = new Property(5, Integer.class, "SoLuong", false, "SO_LUONG");
        public final static Property DateCreate = new Property(6, java.util.Date.class, "DateCreate", false, "DATE_CREATE");
        public final static Property DateUpdate = new Property(7, java.util.Date.class, "DateUpdate", false, "DATE_UPDATE");
    };


    public SanPhamDao(DaoConfig config) {
        super(config);
    }
    
    public SanPhamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SAN_PHAM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TEN_SP' TEXT," + // 1: TenSP
                "'GIA_MUA' REAL," + // 2: GiaMua
                "'GIA_BAN' REAL," + // 3: GiaBan
                "'BARCODE' TEXT," + // 4: Barcode
                "'SO_LUONG' INTEGER," + // 5: SoLuong
                "'DATE_CREATE' INTEGER," + // 6: DateCreate
                "'DATE_UPDATE' INTEGER);"); // 7: DateUpdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SAN_PHAM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SanPham entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String TenSP = entity.getTenSP();
        if (TenSP != null) {
            stmt.bindString(2, TenSP);
        }
 
        Float GiaMua = entity.getGiaMua();
        if (GiaMua != null) {
            stmt.bindDouble(3, GiaMua);
        }
 
        Float GiaBan = entity.getGiaBan();
        if (GiaBan != null) {
            stmt.bindDouble(4, GiaBan);
        }
 
        String Barcode = entity.getBarcode();
        if (Barcode != null) {
            stmt.bindString(5, Barcode);
        }
 
        Integer SoLuong = entity.getSoLuong();
        if (SoLuong != null) {
            stmt.bindLong(6, SoLuong);
        }
 
        java.util.Date DateCreate = entity.getDateCreate();
        if (DateCreate != null) {
            stmt.bindLong(7, DateCreate.getTime());
        }
 
        java.util.Date DateUpdate = entity.getDateUpdate();
        if (DateUpdate != null) {
            stmt.bindLong(8, DateUpdate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SanPham readEntity(Cursor cursor, int offset) {
        SanPham entity = new SanPham( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TenSP
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // GiaMua
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // GiaBan
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Barcode
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // SoLuong
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // DateCreate
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // DateUpdate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SanPham entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTenSP(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGiaMua(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setGiaBan(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setBarcode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSoLuong(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDateCreate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setDateUpdate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SanPham entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SanPham entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
